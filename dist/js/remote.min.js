'use strict';

// 控制对方的操作
var Remote = function Remote(socket) {
    // 游戏对象
    var game = void 0;
    // 绑定按钮事件
    var bindEvents = function bindEvents() {
        // 初始化对方游戏界面和下一个方块
        socket.on('init', function (data) {
            start(data.type, data.dir);
        });
        socket.on('next', function (data) {
            game.performNext(data.type, data.dir);
        });
        socket.on('rotate', function (data) {
            game.rotate();
        });
        socket.on('right', function (data) {
            game.right();
        });
        socket.on('left', function (data) {
            game.left();
        });
        socket.on('down', function (data) {
            game.down();
        });
        socket.on('fall', function (data) {
            game.fall();
        });
        socket.on('fixed', function (data) {
            game.fixed();
        });
        // 消行
        socket.on('line', function (data) {
            game.checkClear();
            game.addScore(data);
        });
        // 同步时间
        socket.on('time', function (data) {
            game.setTime(data);
        });
        socket.on('lose', function (data) {
            game.gameOver(false);
        });
    };

    // 开始方法
    var start = function start(type, dir) {
        var doms = {
            gameDiv: document.getElementById('remote_game'),
            nextDiv: document.getElementById('remote_next'),
            timeDiv: document.getElementById('remote_time'),
            scoreDiv: document.getElementById('remote_score'),
            resultDiv: document.getElementById('remote_gameover')
        };
        game = new Game();
        game.init(doms, type, dir);
    };
    bindEvents();
};